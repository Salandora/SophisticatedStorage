name: Mod Build

on: [ push, workflow_dispatch ]

jobs:
  build:
    strategy:
      matrix:
        # Use these Java versions
        java: [
          17,    # Current Java LTS & minimum supported by Minecraft
          21,    # Current Java LTS
        ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Validate gradle wrapper
        uses: gradle/wrapper-validation-action@v2
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: zulu
          cache: gradle
      - name: Make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        env:
          REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
          READ_PACKAGES_TOKEN: ${{ secrets.READ_PACKAGES_TOKEN }}
        uses: nick-invision/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: ./gradlew check build
      - name: Publish to Github Packages
        if: ${{ matrix.java == '21' }} # Only upload artifacts built from latest java
        env:
          REPO_USERNAME: ${{ secrets.REPO_USERNAME }}
          READ_PACKAGES_TOKEN: ${{ secrets.READ_PACKAGES_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew publish
      - name: Capture build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Artifacts
          path: build/libs/
      - name: Cleanup old artifacts
        uses: actions/delete-package-versions@v3
        with:
          package-name: 'com.github.salandora.sophisticatedstorage-fabric'
          min-versions-to-keep: 10
#      - name: Code Quality
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: ./gradlew -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.organization=p3pp3rf1y-github sonarqube
#      - name : Retrieve Version
#        run: |
#          echo "$(${{github.workspace}}/gradlew -q printVersionName | awk -F "version:" '{printf $2}')"
#          echo "VERSION_NAME=$(${{github.workspace}}/gradlew -q printVersionName | awk -F "version:" '{printf $2}')" >> $GITHUB_OUTPUT
#        id: version
#      - name : Compile version message
#        uses: actions/github-script@v6
#        with:
#          script: |
#            const gh = ${{ toJSON(github) }};
#
#            core.setOutput('EMBED_TITLE', "[" + gh.event.repository.name + ":" + gh.ref_name +"] new build ${{steps.version.outputs.VERSION_NAME}}");
#            core.setOutput('EMBED_URL', "https://github.com/Salandora/SophisticatedStorage/packages/1388832?version=${{steps.version.outputs.VERSION_NAME}}");
#            core.setOutput('EMBED_AUTHOR_NAME', gh.event.sender.login);
#            core.setOutput('EMBED_AUTHOR_ICON_URL', gh.event.sender.avatar_url);
#
#            const commits = ${{ toJSON(github.event.commits) }};
#            let description = "";
#            for (const commit of commits) {
#              if (description.length !== 0) {
#                description += "\n";
#              }
#              description += "[" + commit.id.slice(0,7) + "](<" + commit.url + ">) " + commit.message + " - " + commit.author.username;
#            }
#            core.setOutput('EMBED_DESCRIPTION', description);
#        id: embed
#      - name: Send Discord Notification
#        uses: tsickert/discord-webhook@v5.3.0
#        with:
#          webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
#          embeds: ${{steps.embed.outputs.EMBEDS}}
#          content: null
#          embed-title: "${{steps.embed.outputs.EMBED_TITLE}}"
#          embed-url: "${{steps.embed.outputs.EMBED_URL}}"
#          embed-description: "${{steps.embed.outputs.EMBED_DESCRIPTION}}"
#          embed-author-name: "${{steps.embed.outputs.EMBED_AUTHOR_NAME}}"
#          embed-author-icon-url: "${{steps.embed.outputs.EMBED_AUTHOR_ICON_URL}}"
#          embed-color: 58633
